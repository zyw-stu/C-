/*
	标准模板库(Standard Template Library) 是一个常用的数据结构和算法的集合
	泛化程序设计：试用模板的程序设计法
	@容器：可容纳各种数据类型的通用数据结构，是类模板
		1.顺序容器
			vector, deque, list
			容器并非排序的，元素插入的位置同元素的值无关
				@ vector  头文件<vector>
					动态数组。元素在内存连续存放。随机存取任何元素都能在常数的时间内完成。
					在尾端添加元素具有较佳的性能
				@ deque   头文件deque
					双向队列。元素在内存内连续存放。随机存取任何的常数都能在常数的时间内完成（但次于vector)
					在两端添加元素具有较佳的性能
				@ list	  头文件<list>
					双向链表. 元素在内存内不连续存放。在任何位置增删元素都能在常数时间完成。
					不支持随机存取

		2.关联容器
			set,multiset,map,multimap
			元素是排序的，插入任何的元素，都按照相应的规则来确定其位置，在查找是具有非常好的性能
			通常以平衡二叉树方式实现，插入和检索的时间都是O（log(N)）
				@set,multiset  头文件 <set>
					set即集合。set中不允许相同的元素，multiset中允许存在相同的元素
				@map,multimap  头文件 <map>
					map与set的不同在于map中存放的元素有且仅有两个成员变量，一个为first,另一个为second
					map根据first值对元素进行从小到大排序，并可快速的根据first来检索元素
		3.容器适配器
			stack,queue,priority_queue
				@stack 头文件 <stack>
					栈。是项的有限序列，并满足序列中被删除，检索，修改的项只能是最近插入的项
				@queue 头文件 <queue>
				    队列。先进先出。
				@priority_queue 头文件 <queue>
					优先级队列。最高优先级元素总是第一个出列
		# 顺序容器和关联容器中都有的成员函数
		  @begin  返回指向容器中第一个元素的迭代器
		  @end	  返回指向容器中最后一个元素后面的位置的迭代器
		  @rbegin 返回指向容器中最后一个元素的迭代器
		  @rend   返回指向容器中第一个元素前面位置的迭代器
		  @erase  从容器中删除一个或几个元素
		  @clear  从元素中删除所有元素
		# 顺序容器中常用成员函数
		  @front: 返回容器中第一个元素的引用
		  @back： 返回容器中最后一个元素的引用
		  @push_back:在容器末位添加新的元素
		  @pop_back:删除容器末尾的元素
		  @erase: 删除迭代器指向的元素（可能会使迭代器失效），或删除一个区间，返回被删除元素后面的那个元素的迭代器
		对象被插入容器中时，被插入的是对象的一个复制品。
		许多算法，比如排序查找，要求对容器中的元素进行比较，有的容器本身就是排序的，所以放入容器的对象所属的类，往往还应重载==和<运算符
*/
/*
	@迭代器：可用于依次存取容器中的元素，类似于指针
		用于指向顺序容器和关联容器中的元素。有const和非const两种
		通过迭代器可以读取它指向的元素，通过非const迭代器还能修改其指向的元素
			#定义：
			    容器类名::iterator	变量名;
				容器类名::const_iterator	变量名;
			#访问：
				*迭代器变量名
			#特点：
				迭代器上可以执行++操作，以使其指向容器中的下一个元素。
				如果迭代器到达了容器中最后一个元素的后面，此时在使用就会出错，类似于使用NULL或未初始化的指针一样。
			#类型
				@双向迭代器
					若p1,p都是双向迭代器，则可对p,p1可进行以下的操作：
				    ++p,p++	使p指向容器中的下一个元素
					--p,p-- 使p指向容器中的上一个元素
					*p      取p指向的元素
					p=p1	赋值
					p==p1,p!=p1	判断是否相等，不等
				@随机访问迭代器
					双向迭代器的所有操作
					p+=i;   将p向后移动i个元素
					p-=i;	将p向前移动i各元素
					p+i		值为：指向p后面的第i个元素的迭代器
					p-i		值为：指向p前面的第i个元素的迭代器
					p[i]	值为：p后面第i个元素的引用
					p<p1,p<=p1,p>p1,p>=p1
				容器						容器上迭代器的类别
				vector						随机访问
				deque						随机访问
				list						双向
				set/multiset				双向
				map/multimap				双向

				stack						不支持迭代器
				queue						不支持迭代器
				priority_queue				不支持迭代器
                有的算法，例如sort,binary_search需要通过随机访问迭代器来访问容器中的元素
*/
/*
	@算法：用来操作容器中的元素的函数模板，大多数是在<algorithm>中定义
		sort()来对一个vector中的数据进行排序，find()来搜索一个list中的对象
		算法通过迭代器来操纵容器中的元素。许多算法可以对容器中的局部区间进行操作，因此需要两个参数，一个是起始元素的迭代器，一个是终止元素后面的迭代器
		有的算法返回一个迭代器，如find（）
		算法可以处理容器，也可以处理普通数组
			@find()
				#定义：
					template<class Inlt,class T>
					Inlt find(Inlt first,Inlt last,const T &val);
				#参数
					first，last 都是容器的迭代器。find在[first,last)查找等于val的元素
				#判断
					用==运算符判断相等
				#返回值
					返回值是迭代器。若找到，该迭代器指向被找到的元素。如果找不到，该迭代器等于last
			@ STL 中"大","小"，"相等"的概念，一般自定义，在缺省的条件下，x比y小，当x<y
				#关联容器内部的元素是由小到大排序的
				#有些算法要求其操作的区间是从小到大排序的，称为“有序区间算法” 如binary_search
				#有些算法对区间由小到大排序，称为“排序算法”
				#有时，x与y相等等价于x==y为真，如顺序查找find
				#有时，x与y相等等价于x<y和y<x同时为假，如有序区间算法binary_search,关联容器自身的成员函数find				

*/

#include <vector>
#include <list>
#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
	{
		vector<int> v;//一个存放int元素的数组，一开始里面没有元素
		v.push_back(1); v.push_back(2); v.push_back(3); v.push_back(4);
		vector<int>::const_iterator i;//常量迭代器
		for (i = v.begin(); i != v.end(); ++i)
			cout << *i << ",";
		cout << endl;
		vector<int>::reverse_iterator r;//反向迭代器
		for (r = v.rbegin(); r != v.rend(); r++)
			cout << *r << ",";
		cout << endl;
		vector<int>::iterator j;
		for (j = v.begin(); j != v.end(); j++)
			*j = 100;
		for (i = v.begin(); i != v.end(); i++)
			cout << *i << ",";
		cout << endl << "*********************" << endl;
	}
	//随机访问迭代器
	{
		cout << "随机访问迭代器" << endl;
		vector<int> v(100);
		int i;
		for (i = 0; i < v.size(); i++)//访问方法1
			cout << v[i];//根据元素下标随机访问
		vector<int>::const_iterator j;
		for (j = v.begin(); j != v.end(); j++)//访问方法2
			cout << *j;
		for (j = v.begin(); j < v.end(); j++)//访问方法3
			cout << *j;
		j = v.begin();//间隔一个输出
		while (j < v.end()) {
			cout << *j;
			j = j + 2;
		}
	}
	//双向迭代器
	{
		cout <<endl<< "双向迭代器" << endl;
		list <int> v;
		list <int>::const_iterator j;
		for (j = v.begin(); j != v.end(); ++j)//访问方法2
			cout << *j;
		//随机访问不支持<, list 没有[]成员函数
	}
	//find 实例
	{
		int array[10] = { 10,20,30,40 };
		vector<int> v;
		v.push_back(1); v.push_back(2); v.push_back(3); v.push_back(4);
		vector<int>::iterator p;
		p = find(v.begin(), v.end(), 3);
		if (p != v.end())
			cout << *p << endl;//输出3
		p = find(v.begin(), v.end(), 9);
		if (p == v.end())
			cout << "not found" << endl;
		p = find(v.begin() + 1, v.end() - 2, 1);
		if (p != v.end())
			cout << *p << endl;
		int* pp = find(array, array + 4, 20);//数组名是迭代器
		cout << *pp << endl;
	}
	//STL中“相等”概念的演示
	{
		class A
		{
			int v;
		public:
			A(int n):v(n){}
			bool operator < (const A& a2) const {
				cout << v << "<" << a2.v << "?" << endl;
				return false;
			}
			bool operator==(const A& a2) const {
				cout << v << "==" << a2.v << "?" << endl;
				return v == a2.v;
			}
		};
		A a[] = { A(1),A(2),A(3),A(4),A(5) };
		cout << binary_search(a, a + 4, A(9));//折半查找
		return 0;
	}
}
